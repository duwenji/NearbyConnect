org: duwenji
app: near-by-connect
service: backend-service

plugins:
  - serverless-offline
  - serverless-python-requirements
  - serverless-secrets-plugin

custom:
  stages:
    dev:
    prod:
  stage: ${opt:stage, 'dev'}
  pythonRequirements:
    layer: true
    dockerizePip: true
  secrets: ${file(secrets.${self:custom.stage}.yml)}
  
provider:
  name: aws
  runtime: python3.12
  profile: default
  region: ap-northeast-1
  memorySize: 128
  timeout: 15
  tracing:
    apiGateway: true
    lambda: true
  apiGateway:
    minimumCompressionSize: 1024
    shouldStartNameWithService: true
    apiKeys:
      - NearByConnectApiKey
    usagePlan:
      quota:
        limit: 1000
        offset: 0
        period: MONTH
      throttle:
        burstLimit: 20
        rateLimit: 10
  environment:
    APP: ${self:app}
    SERVICE: ${self:service}
    STAGE: ${self:custom.stage}
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "lambda:InvokeFunction"
          Resource: "*"
        - Effect: "Allow"
          Action:
            - "DynamoDB:*"
          Resource: "*"
        - Effect: "Allow"
          Action:
            - "secretsmanager:GetSecretValue"
          Resource: "*"

package:
  exclude:
    - node_modules/**
    - package-lock.json
    - package.json
    - README.md
    - requirements.txt
    - __pycache__/**
    - .pytest_cache/**  
    - secrets.*.yml

functions:
  getItem:
    handler: lamda/handler.get_item
    memorySize: 128
    timeout: 15
    layers:
      - Ref: PythonRequirementsLambdaLayer
    events:
      - http:
          path: item/{id}
          method: get
          cors: true
          private: true    
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  createItem:
    handler: lamda/handler.create_item
    memorySize: 128
    timeout: 15
    layers:
      - Ref: PythonRequirementsLambdaLayer
    events:
      - http:
          path: item
          method: post
          cors: true
          private: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  searchByLocation:
    handler: lamda/handler.search_by_location
    memorySize: 128
    timeout: 15
    layers:
      - Ref: PythonRequirementsLambdaLayer
    events:
      - http:
          path: search
          method: get
          cors: true
          private: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          request:
            parameters:
              querystrings:
                longitude: true
                latitude: true                
  generateMessage:
    handler: lamda/handler.generate_message
    memorySize: 128
    timeout: 15
    layers:
      - Ref: PythonRequirementsLambdaLayer
    events:
      - http:
          path: generate-message
          method: post
          cors: true
          private: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  websocket-connect:
    handler: lamda/websockets.connect
    environment:
      WEBSOCKET_TABLE_NAME: ${self:service}-${self:custom.stage}-websocket-table
    layers:
      - Ref: PythonRequirementsLambdaLayer
    events:
      - websocket:
          route: $connect
  websocket-disconnect:
    handler: lamda/websockets.disconnect
    environment:
      WEBSOCKET_TABLE_NAME: ${self:service}-${self:custom.stage}-websocket-table
    layers:
      - Ref: PythonRequirementsLambdaLayer
    events:
      - websocket:
          route: $disconnect
  websocket-message:
    handler: lamda/websockets.message
    environment:
      WEBSOCKET_TABLE_NAME: ${self:service}-${self:custom.stage}-websocket-table
    layers:
      - Ref: PythonRequirementsLambdaLayer
    events:
      - websocket:
          route: message
  websocket-default:
    handler: lamda/websockets.default
    environment:
      WEBSOCKET_TABLE_NAME: ${self:service}-${self:custom.stage}-websocket-table
    layers:
      - Ref: PythonRequirementsLambdaLayer
    events:
      - websocket:
          route: $default

resources:
  Resources:
    WebsocketUsersTable:
      Type: AWS::DynamoDB::Table
      Properties: 
        TableName: ${self:service}-${self:custom.stage}-websocket-table
        AttributeDefinitions: 
          - AttributeName: connectionId
            AttributeType: S
        KeySchema: 
          - AttributeName: connectionId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    MessagesTable:
      Type: AWS::DynamoDB::Table
      Properties: 
        TableName: Messages
        AttributeDefinitions: 
          - AttributeName: id
            AttributeType: S
          - AttributeName: longitude
            AttributeType: N
          - AttributeName: latitude
            AttributeType: N
        KeySchema: 
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: LocationIndex
            KeySchema:
              - AttributeName: longitude
                KeyType: HASH
              - AttributeName: latitude
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
    NearByConnectKeysSecret:
      Type: AWS::SecretsManager::Secret
      Properties:
        Name: near_by_connect_keys
        Description: "Secrets for Near By Connect application"
        SecretString: '{"openai_api_key":"${self:custom.secrets.OPENAI_API_KEY}"}'
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: NearByConnectUserPool
        AutoVerifiedAttributes:
          - email
    ApiGatewayAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: NearByConnectAuthorizer
        Type: COGNITO_USER_POOLS
        IdentitySource: method.request.header.Authorization
        RestApiId:
          Ref: ApiGatewayRestApi
        ProviderARNs:
          - Fn::GetAtt:
            - CognitoUserPool
            - Arn


    # âœ– ServerlessError2: An error occurred: ApiGatewayUsagePlanKey - Resource handler returned message: "Usage Plan 0fnnhj cannot be added because API Key rx9hat6b21 cannot reference multiple Usage Plans with the same API Stage: jusce8t6oe:dev (Service: ApiGateway, Status Code: 409, Request ID: 79537315-ee5d-4362-99ef-eac399983ff6)" (RequestToken: 8da0bc51-200e-3994-c333-ad81202a15df, HandlerErrorCode: AlreadyExists).

    # ApiGatewayUsagePlan:
    #   Type: AWS::ApiGateway::UsagePlan
    #   Properties:
    #     UsagePlanName: MyUsagePlan
    #     ApiStages:
    #       - ApiId:
    #           Ref: ApiGatewayRestApi
    #         Stage: ${self:custom.stage}
    #     Throttle:
    #       BurstLimit: 20
    #       RateLimit: 10
    #     Quota:
    #       Limit: 1000
    #       Period: MONTH

    # ApiGatewayUsagePlanKey:
    #   Type: AWS::ApiGateway::UsagePlanKey
    #   Properties:
    #     KeyId:
    #       Ref: ApiGatewayApiKey1
    #     KeyType: API_KEY
    #     UsagePlanId:
    #       Ref: ApiGatewayUsagePlan

    # ApiGatewayApiKey1:
    #   Type: AWS::ApiGateway::ApiKey
    #   Properties:
    #     Enabled: true
    #     Name: NearByConnectApiKey
    #     StageKeys:
    #       - RestApiId:
    #           Ref: ApiGatewayRestApi
    #         StageName: ${self:custom.stage}